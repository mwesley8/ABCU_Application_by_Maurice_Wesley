#include <iostream>
#include <string>
#include <iomanip>
#include <fstream>
#include <regex>
#include <sstream>
#include <vector>
#include <regex>

struct Curriculum {
	std::string m_ID;
	std::string m_Course;
	//std::string m_Requirements;
	std::vector<std::string> m_requirements;
};
struct Node {
	Curriculum curriculum;
	Node* left;
	Node* right;

	Node();
	Node(Curriculum t_courses);
};
struct Prerequisites {
	std::string m_Class;

	Prerequisites();
	Prerequisites(std::string aClass);
};
class ExecuteProgram {

public:
	Prerequisites aCourse;
	Curriculum search(std::string t_courseID);
	
	Node* root = nullptr;
	Node* insertNode(Node*& root, Node* newNode);

	std::vector <ExecuteProgram> classList;
	ExecuteProgram();
	ExecuteProgram(Prerequisites aClass);
	
	void runProgram();
	void printMenu();
	int checkNum();
	
	std::string CheckClass();
	std::string CheckFile();
	std::string stringToUpper(std::string t_input);
	void readFile(std::string t_address);
	
	void inOrderPrint(Node* root);
	void PrintClass(Curriculum& t_curr);
	bool validateClass(std::vector<ExecuteProgram>& classList, std::string t_aClass);
	
	void quickSortClassList(std::vector<ExecuteProgram>& t_classList, int t_begin, int t_end);
	void quickSortPrerequisites(Node* t_curr, int t_begin, int t_end);
    
	int partitionClassList(std::vector<ExecuteProgram>& t_classList, int t_begin, int t_end);
	int partitionPrerequisites(Node* t_curr, int t_begin, int t_end);
};

#include "ExecuteProgram.h"
//
using namespace std;
//
Node::Node() {
	left = nullptr;
	right = nullptr;
}
Node::Node(Curriculum t_courses) {
	this->curriculum = t_courses;
	left = nullptr;
	right = nullptr;
}


Prerequisites::Prerequisites() {};

Prerequisites::Prerequisites(std::string aClass) {
	this->m_Class = aClass;
}

ExecuteProgram::ExecuteProgram() {}

ExecuteProgram::ExecuteProgram(Prerequisites aClass) {
	this->aCourse = aClass;
}

void ExecuteProgram::printMenu() {
	// Method defintion to output menu to user
	cout << setw(64) << right << "COURSE PLANNER" << endl;
	cout << setw(42) << " " << string(29, '*') << endl;
	cout << "" << endl;
	cout << setw(42) << " " << "** 1: Load Data Structure  ** " << endl;
	cout << "" << endl;
	cout << setw(42) << " " << string(29, '*') << endl;
	cout << "" << endl;
	cout << setw(42) << " " << "** 2: Print Course List    **" << endl;
	cout << "" << endl;
	cout << setw(42) << " " << string(29, '*') << endl;
	cout << "" << endl;
	cout << setw(42) << " " << "** 3: Print Course         **" << endl;
	cout << "" << endl;
	cout << setw(42) << " " << string(29, '*') << endl;
	cout << "" << endl;
	cout << setw(42) << " " << "** 9: Exit                 **" << endl;
	cout << "" << endl;
	cout << setw(42) << " " << string(29, '*') << endl;
}
int ExecuteProgram::checkNum() {
	// Function to check user selection
	string userInput{};                                     // Declare/initialize local variables
	int userNum{};
	printf("\n\n\n");
	// Loop to check user input
	while (true) {
		printMenu();                                        // Function call to print menu
		printf("\n\n");
		cout << "Please enter your selection:" << endl;     // Output to user
		regex selection("[1-3]");                           // Regex classification
		getline(cin, userInput, '\n');                      // Get user input
		// Condition to check user input
		if (regex_match(userInput, selection) || userInput == "9") {
			userNum = stoi(userInput);
			break;
		}
		// Condition when previous condition false
		else {
			// Output to user
			system("color 46");
			cout << "\nPlease enter a valid option. \n" << endl;
			system("pause");
			cin.clear();
			system("cls");
			system("color 1C");
		}
	}
	return userNum; // return user input
}
bool ExecuteProgram::validateClass(std::vector<ExecuteProgram>& classList, string aClass) {
	int low = 0;
	int high = classList.size() - 1;

	while (low <= high) {
		int mid = (low + high) / 2;
		if (classList.at(mid).aCourse.m_Class == aClass) {
			return true;
		}
		else if (classList.at(mid).aCourse.m_Class < aClass) {
			low = mid + 1;
		}
		else {
			high = mid - 1;
		}
	}
	return false;
}
string ExecuteProgram::CheckFile() {
	string extension;
	regex file("[a-zA-z]*\.txt");
	//string test = "testing.txt";
	while (true) {
		system("cls");
		cout << "\nPlease enter the file extension:\n" << endl;
		getline(cin, extension, '\n');
		if (regex_match(extension, file)) {
			cout << "\n\nThank You!!\n" << endl;
			return extension;
		}
		else {
			cout << "\nYou have entered an invalid file extension.\n" << endl;
			cout << "Please enter a valid file extension" << endl;
			system("pause");
		}
	}
}

int ExecuteProgram::partitionClassList(vector<ExecuteProgram>& t_classList, int t_begin, int t_end) {
	/* Partition the vector of bids into two parts, low and high */

	// Initialize local variables
	int low = t_begin;
	int high = t_end;
	int mid = (low + high) / 2;
	string pivot = classList[mid].aCourse.m_Class;
	int count = 0;

	// Count how many elements less than the current pivot
	for (int i = low; i <= high; i++) {
		if (t_classList[i].aCourse.m_Class.compare(pivot) < 0 && i != mid)
			count++;
	}
	// Giving pivot element its correct position
	int pivotIndex = low + count;
	swap(t_classList[pivotIndex].aCourse.m_Class, t_classList[mid].aCourse.m_Class);

	// Execute loop while condition true
	while (low < pivotIndex && high > pivotIndex) {

		// Compare current element to middle element
		while (t_classList[low].aCourse.m_Class.compare(pivot) < 0) {
			low++;
		}
		// Compare element to middle element
		while (t_classList[high].aCourse.m_Class.compare(pivot) >= 0) {
			high--;
		}
		// Swap elements when condition is true
		if (low < pivotIndex && high > pivotIndex) {
			swap(t_classList[low].aCourse.m_Class, t_classList[high].aCourse.m_Class);
			low++;
			high--;
		}
	}
	return pivotIndex;
}
void ExecuteProgram::quickSortClassList(vector <ExecuteProgram>& t_classList, int t_begin, int t_end) {

	// Base Case
	if (t_begin >= t_end) {
		return;
	}
	// Parititioning the array
	int mid = partitionClassList(classList, t_begin, t_end);

	// Sorting the left part
	quickSortClassList(t_classList, t_begin, mid - 1);

	// Sorting the right part
	quickSortClassList(t_classList, mid + 1, t_end);
}
int ExecuteProgram::partitionPrerequisites(Node* t_curr, int begin, int end) {
	/* Partition the vector of bids into two parts, low and high */

	// Initialize local variables
	int low = begin;
	int high = end;
	int mid = (low + high) / 2;
	string pivot = t_curr->curriculum.m_requirements[mid];
	int count = 0;

	// Count how many elements less than the current pivot
	for (int i = low; i <= high; i++) {
		if (t_curr->curriculum.m_requirements[i].compare(pivot) < 0 && i != mid)
			count++;
	}
	// Giving pivot element its correct position
	int pivotIndex = low + count;
	swap(t_curr->curriculum.m_requirements[pivotIndex], t_curr->curriculum.m_requirements[mid]);

	// Execute loop while condition true
	while (low < pivotIndex && high > pivotIndex) {

		// Compare current element to middle element
		while (t_curr->curriculum.m_requirements[low].compare(pivot) < 0) {
			low++;
		}
		// Compare element to middle element
		while (t_curr->curriculum.m_requirements[high].compare(pivot) >= 0) {
			high--;
		}
		// Swap elements when condition is true
		if (low < pivotIndex && high > pivotIndex) {
			swap(t_curr->curriculum.m_requirements[low], t_curr->curriculum.m_requirements[high]);
			low++;
			high--;
		}
	}
	return pivotIndex;
}
void ExecuteProgram::quickSortPrerequisites(Node* t_curr, int t_begin, int t_end) {

	// Base Case
	if (t_begin >= t_end) {
		return;
	}
	// Parititioning the array
	int mid = partitionPrerequisites(t_curr, t_begin, t_end);

	// Sorting the left part
	quickSortPrerequisites(t_curr, t_begin, mid - 1);

	// Sorting the right part
	quickSortPrerequisites(t_curr, mid + 1, t_end);
}
void ExecuteProgram::readFile(string t_File) {
	// Local variables
	ExecuteProgram t;
	string line;
	string line2;
	ifstream file{ t_File };

	// Declare regex object
	regex delimiter(",");
	if (file.is_open()) {
		while (getline(file, line)) {
			vector <string> token(sregex_token_iterator(line.begin(), line.end(), delimiter, -1), {});
			ExecuteProgram t(token.at(0));
			classList.push_back(t);
		}
		quickSortClassList(classList, 0, classList.size() - 1);
		file.close();
	}
	else {
		cout << "Cannot open file" << endl;
		return;
	}
	
	ifstream file1{ t_File };
	if (file1.is_open()) {
		while (getline(file1, line2)) {
			Node* newNode = new Node();
			vector <string> token1(sregex_token_iterator(line2.begin(), line2.end(), delimiter, -1), {});
			if (token1.size() > 1) {
				newNode->curriculum.m_ID = token1.at(0);
				newNode->curriculum.m_Course = token1.at(1);
				for (int i = 2; i < token1.size(); ++i) {
					if (validateClass(classList, token1.at(i))) {
						newNode->curriculum.m_requirements.push_back(token1.at(i));
					}
				}
				quickSortPrerequisites(newNode, 0, newNode->curriculum.m_requirements.size() - 1);
				insertNode(root, newNode);
			}
			else {
				cout << "Invalid line" << endl;
			}
		}
		file.close();
	}
	else{
		cout << "Cannot open file" << endl;
	}
}

string ExecuteProgram::stringToUpper(string input) {
	for (int i = 0; i < 4; ++i) {
		input[i] = toupper(input[i]);
	}
	return input;
}
Node* ExecuteProgram::insertNode(Node*& root, Node* newNode) {
	if (root == nullptr) {
		root = newNode;
		return root;
	}
	else {
		if (newNode->curriculum.m_ID < root->curriculum.m_ID) {
			root->left = insertNode(root->left, newNode);
		}
		else if (newNode->curriculum.m_ID > root->curriculum.m_ID) {
			root->right = insertNode(root->right, newNode);
		}
		else {
			cout << "No duplicates allowed" << endl;
			return root;
		}
	}
	return root;
}
void ExecuteProgram::inOrderPrint(Node* root) {
	if (root == nullptr) {
		return;
	}
	else {
		inOrderPrint(root->left);
		cout << root->curriculum.m_ID << ", " << root->curriculum.m_Course << endl;
		if (root->curriculum.m_requirements.empty()) {
			cout << "Prerequisites: None" << endl;
		}
		else{
			cout << "Prerequisites: ";
			for (int i = 0; i < root->curriculum.m_requirements.size(); ++i) {
				cout << root->curriculum.m_requirements.at(i) << " ";
			}
			cout << endl;
		}
		inOrderPrint(root->right);
	}
}
string ExecuteProgram::CheckClass() {
	string cls;
	regex test("[a-zA-Z0-9]+");

	while (true) {
		system("cls");
		cout << "\nEnter class:\n" << endl;
		cin >> setw(7) >> cls;
		cin.clear();
		cin.ignore(INT_MAX, '\n');
		if (regex_match(cls, test)) {
			cls = stringToUpper(cls);
			break;
		}
		else {
			cout << "\nYou have entered an invalid class." << endl;
			cout << "\nPlease enter a valid class" << endl;
		}
	}
	return cls;
}
void ExecuteProgram::PrintClass(Curriculum& t_curr) {
	if (!t_curr.m_ID.empty()) {
		cout << "\n" << t_curr.m_ID << ", " << t_curr.m_Course << endl;
		if (!t_curr.m_requirements.empty()) {
			cout << "Prerequisites: ";
			for (int i = 0; i < t_curr.m_requirements.size(); ++i) {
				cout << t_curr.m_requirements.at(i) << " ";
			}
			cout << endl;
		}
		else {
			cout << "Prerequisites: NONE\n" << endl;
		}
	}
	else {
		cout << "\nCourse could not be found\n" << endl;
	}
}
Curriculum ExecuteProgram::search(string t_courseID) {
	Curriculum curriculum;
	Node* temp;

	if (root == nullptr) {
		return curriculum;
	}
	else {
		temp = root;
		while (temp != nullptr) {
			if (temp->curriculum.m_ID == t_courseID) {
				curriculum = temp->curriculum;
				break;
			}
			else if (t_courseID < temp->curriculum.m_ID) {
				temp = temp->left;
			}
			else {
				temp = temp->right;
			}
		}
	}
	return curriculum;
}
void ExecuteProgram::runProgram() {
	auto rp = make_shared <ExecuteProgram>();
	Curriculum curr;
	int selection;

	while (true) {
		system("color 1C");
		selection = checkNum();

		switch (selection) {
		case 1:
			system("cls");
			rp->readFile(rp->CheckFile());
			system("pause");
			system("cls");
			break;
		case 2:
			system("cls");
			cout << "\nHere is a sample schedule:\n" << endl;
			rp->inOrderPrint(rp->root);
			cout << "" << endl;
			system("pause");
			system("cls");
			break;
		case 3:
			system("cls");
			curr = rp->search(rp->CheckClass());
			rp->PrintClass(curr);
			system("pause");
			system("cls");
			break;
		case 9:
			system("cls");
			cout << "\nYou have chose to exit" << endl;
			cout << "\nThank you for using the course planner\n" << endl;
			exit(0);
		}
	}
}

int main() {

	auto start = make_shared<ExecuteProgram>();
	start->runProgram();

	return 0;
}